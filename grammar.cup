
import java_cup.runtime.*;

terminal START;    
terminal END;      
terminal IN;       
terminal OUT;      
terminal LPAREN;   
terminal RPAREN;   
terminal COLON;    
terminal NUMBER;   
terminal STRING;   
terminal FLAG;     
terminal MAIN;     
terminal SMILE;    
terminal ASSIGN;   
terminal READ;     
terminal WRITE;    
terminal CALL;     
terminal WHEN;     
terminal DO;       
terminal DONE;     
terminal PLUS;     
terminal MINUS;    
terminal MULTIPLY; 
terminal DIVIDE;   
terminal UP;       
terminal DOWN;     
terminal FLIP;     
terminal QUESTION; 

terminal String ID;    
terminal int NUMBERLIT;
terminal String STRINGLIT;

non terminal Program program;
non terminal Expr binaryExpression;
non terminal Expr unaryExpression;
non terminal OperandExpr operandExpression;

precedence left PLUS, MINUS;
precedence left MULTIPLY, DIVIDE;
precedence left QUESTION;

program ::= binaryExpression:e
	{: RESULT = new Program(e); :}
  ;

binaryExpression ::= unaryExpression:u
                 {: RESULT = u; :}
                 |
                 binaryExpression:b1 PLUS binaryExpression:b2
                 {: RESULT = new BinExpr(b1, "+", b2); :}
                 |
                 binaryExpression:b1 MINUS binaryExpression:b2
                 {: RESULT = new BinExpr(b1, "-", b2); :}
                 |
                 binaryExpression:b1 MULTIPLY binaryExpression:b2
                 {: RESULT = new BinExpr(b1, "*", b2); :}
                 |
                 binaryExpression:b1 DIVIDE binaryExpression:b2
                 {: RESULT = new BinExpr(b1, "/", b2); :}
                 |
                 binaryExpression:b1 QUESTION binaryExpression:b2
                 {: RESULT = new BinExpr(b1, "?", b2); :}
                 ;

unaryExpression ::= operandExpression:o
                {: RESULT = o; :}
                |
                FLIP binaryExpression:b
                {: RESULT = new UnaryExpr("flip", b); :}
                ;

operandExpression ::= ID:i
                  {: RESULT = new OperandExpr(i, "var"); :}
                  |
                  UP
                  {: RESULT = new OperandExpr(true); :}
                  |
                  DOWN
                  {: RESULT = new OperandExpr(false); :}
                  |
                  NUMBERLIT:n
                  {: RESULT = new OperandExpr(n); :}
                  |
                  STRINGLIT:s
                  {: RESULT = new OperandExpr(s, "strLit"); :}
                  ;