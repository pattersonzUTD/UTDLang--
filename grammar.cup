
import java_cup.runtime.*;

terminal START;    
terminal END;      
terminal IN;       
terminal OUT;      
terminal LPAREN;   
terminal RPAREN;   
terminal COLON;    
terminal MAIN;     
terminal SMILE;    
terminal ASSIGN;   
terminal READ;     
terminal WRITE;    
terminal CALL;     
terminal WHEN;     
terminal DO;       
terminal DONE;     
terminal PLUS;     
terminal MINUS;    
terminal MULTIPLY; 
terminal DIVIDE;   
terminal UP;       
terminal DOWN;     
terminal FLIP;     
terminal QUESTION; 

terminal String NUMBER;   
terminal String STRING;   
terminal String FLAG;     

terminal String ID;    
terminal int NUMBERLIT;
terminal String STRINGLIT;

non terminal Program program;
non terminal Expr binaryExpression;
non terminal Expr unaryExpression;
non terminal OperandExpr operandExpression;
non terminal IDList idList;
non terminal String type;
non terminal VarStmtList varAndStatementList;
non terminal VarStmtList statements;
non terminal Statement statement;
non terminal Variable variable;
non terminal Body body;

precedence left PLUS, MINUS;
precedence left MULTIPLY, DIVIDE;
precedence left QUESTION;

program ::= body:b
        {: RESULT = new Program(b); :}
        ;

body ::= varAndStatementList:v
     {: RESULT = new Body(v); :}
     ;

varAndStatementList ::= variable:v varAndStatementList:isl
                   {: RESULT = isl.prepend(v); :}
                   |
                   statement:s statements:ss
                   {: RESULT = ss.prepend(s); :}
                   |
                   {: RESULT = new VarStmtList(); :}
                   ;

variable ::= ID:i LPAREN type:t RPAREN SMILE
         {: RESULT = new Variable(i,t); :}
         ;

statements ::= statement:s statements:ss
           {: RESULT = ss.prepend(s); :}
           |
           {: RESULT = new VarStmtList(); :}
           ;

statement ::= ID:i ASSIGN binaryExpression:b SMILE
          {: RESULT = new AssignmentStmt(i,b); :}
          |
          READ LPAREN ID:i RPAREN SMILE
          {: RESULT = new ReadStmt(i); :}
          |
          WRITE LPAREN ID:i RPAREN SMILE
          {: RESULT = new WriteStmt(i); :}
          |
          CALL ID:i LPAREN idList:is RPAREN SMILE
          {: RESULT = new CallStmt(i, is); :}
          |
          WHEN binaryExpression:b DO statements:s DONE SMILE
          {: RESULT = new WhenStmt(b,s); :}
          ;
          
type ::= NUMBER:n
     {: RESULT = n; :}
     |
     STRING:s
     {: RESULT = s; :}
     |
     FLAG:f
     {: RESULT = f; :}
     ;
               
idList ::= ID:i idList:is
       {: RESULT = is.prependID(i); :}
       |
       {: RESULT = new IDList(); :}
       ;


binaryExpression ::= unaryExpression:u
                 {: RESULT = u; :}
                 |
                 binaryExpression:b1 PLUS binaryExpression:b2
                 {: RESULT = new BinExpr(b1, "+", b2); :}
                 |
                 binaryExpression:b1 MINUS binaryExpression:b2
                 {: RESULT = new BinExpr(b1, "-", b2); :}
                 |
                 binaryExpression:b1 MULTIPLY binaryExpression:b2
                 {: RESULT = new BinExpr(b1, "*", b2); :}
                 |
                 binaryExpression:b1 DIVIDE binaryExpression:b2
                 {: RESULT = new BinExpr(b1, "/", b2); :}
                 |
                 binaryExpression:b1 QUESTION binaryExpression:b2
                 {: RESULT = new BinExpr(b1, "?", b2); :}
                 ;

unaryExpression ::= operandExpression:o
                {: RESULT = o; :}
                |
                FLIP binaryExpression:b
                {: RESULT = new UnaryExpr("flip", b); :}
                ;

operandExpression ::= ID:i
                  {: RESULT = new OperandExpr(i, "var"); :}
                  |
                  UP
                  {: RESULT = new OperandExpr(true); :}
                  |
                  DOWN
                  {: RESULT = new OperandExpr(false); :}
                  |
                  NUMBERLIT:n
                  {: RESULT = new OperandExpr(n); :}
                  |
                  STRINGLIT:s
                  {: RESULT = new OperandExpr(s, "strLit"); :}
                  ;